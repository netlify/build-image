# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
orbs:
  docker: circleci/docker@1.7

commands:
  save-images:
    parameters:
      tmp-dir:
        type: string
        default: "/tmp/images"
      image-tags:
        type: string
    steps:
      - run:
          name: Persist Docker images to tar file
          command: |
            mkdir -p << parameters.tmp-dir >>
            docker save << parameters.image-tags >> -o << parameters.tmp-dir >>/build-image
      - persist_to_workspace:
          name: Persist the workspace for later use
          root: << parameters.tmp-dir >>
          paths:
            - build-image

  load-images:
    parameters:
      tmp-dir:
        type: string
        default: "/tmp/images"
    steps:
      - attach_workspace:
          name: Attach to previously created workspace
          at: << parameters.tmp-dir >>
      - run:
          name: Load Docker images
          command: docker load -i << parameters.tmp-dir >>/build-image

  build-image:
    parameters:
      step-name:
        type: string
        default: "Docker build"
      build-target:
        type: enum
        default: "build-image"
        enum: ["build-image", "build-image-test"]
      image-name:
        type: string
      image-tags:
        type: string
        default: "${CIRCLE_SHA1}"
      squash:
        type: boolean
        default: false
    steps:
      - docker/build:
          step-name: << parameters.step-name >>
          image: << parameters.image-name >>
          extra_build_args: "--build-arg NF_IMAGE_VERSION=${CIRCLE_SHA1} --target << parameters.build-target >> <<# parameters.squash >> --squash <</ parameters.squash >>"
          tag: << parameters.image-tags >>

jobs:
  build-images:
    parameters:
      container-image:
        type: string
    docker:
      - image: cimg/base:2021.04
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.7
      - run:
          name: Docker version
          command: docker version
      - run:
          name: Sanitize branch name
          command: echo export "BRANCH=${CIRCLE_BRANCH//\//-}" >> "$BASH_ENV"
      # We build the final docker image first and tag it as the test image
      # depends on it and we can take advantage of the cached layers
      - build-image:
          step-name: "Build final image"
          build-target: "build-image"
          image-tags: "${CIRCLE_SHA1},${BRANCH}"
          image-name: << parameters.container-image >>
      - build-image:
          step-name: "Build test image"
          build-target: "build-image-test"
          image-tags: "${CIRCLE_SHA1}-test,${BRANCH}-test"
          image-name: << parameters.container-image >>
      # We persist the images in the workspace, to later use them in jobs like
      # run tests or pushing to remote repos
      - save-images:
          image-tags: "<< parameters.container-image >>:${CIRCLE_SHA1}-test << parameters.container-image >>:${BRANCH}-test << parameters.container-image >>:${CIRCLE_SHA1} << parameters.container-image >>:${BRANCH}"

  run-tests:
    parameters:
      container-image:
        type: string
    docker:
      - image: cimg/base:2021.04
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.7
      # Load the previously saved docker images from the CCI workspace
      - load-images
      - run:
          name: Run Tests
          command: |
            docker run --name build-image-test-execution << parameters.container-image >>:${CIRCLE_SHA1}-test
            # Copy the Junit test output from the execution to store its results
            docker cp build-image-test-execution:/opt/buildhome/test-env/report.xml ./report.xml
      - store_test_results:
          path: ./report.xml

  push-to-registry:
    parameters:
      container-image:
        type: string
    docker:
      - image: cimg/base:2021.04
    steps:
      - run:
          name: Sanitize branch name
          command: echo export "BRANCH=${CIRCLE_BRANCH//\//-}" >> "$BASH_ENV"
      - setup_remote_docker:
          docker_layer_caching: true
          version: 20.10.7
      # Load the previously saved docker images from the CCI workspace
      - load-images
      - docker/check
      - docker/push:
          image: << parameters.container-image >>
          tag: "${CIRCLE_SHA1},${BRANCH}"

  lint:
    executor: docker/machine
    steps:
      - checkout
      - docker/dockerlint


workflows: # workflows are where we specify the job order and job parameters (if applicable)
  test-build:
    jobs:
      - build-images:
          container-image: "jgantunesntf/netlify-build"
      - run-tests:
          container-image: "jgantunesntf/netlify-build"
          requires: [build-images, lint]
      - push-to-registry:
          container-image: "jgantunesntf/netlify-build"
          requires: [run-tests]
      - lint
